global
    log /dev/log	local0
    log /dev/log	local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    ssl-dh-param-file /etc/haproxy/dhparams.pem

defaults
    log	global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

##########################################
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

##########################################
{% if haproxy_virtual_sites[0] is defined %}
frontend fe_http
    bind *:80     # Bind to port 80 (www) on the container

{% for host in haproxy_virtual_sites %}
{% if host.redirect_to is defined %}
    http-request redirect prefix https://{{ host.redirect_to }} code 302 if { hdr(host) -i {{ host.domain }} }
{% endif %}
{% endfor %}

    # Redirect the connection to the proper server cluster, depending on the match.
{% for host in haproxy_virtual_sites %}
{% if host.backends is defined %}
    redirect scheme https code 302 if { hdr(Host) -i {{ host.domain }}  } !{ ssl_fc }
{% endif %}
{% endfor %}


##########################################
frontend fe_https
    mode http
    option forwardfor
    option http-server-close
    option httpclose
    bind *:443 ssl crt /etc/haproxy/certs/

    # http-response add-header X-LB-Server %H

    http-request set-header X-Client-IP %[src]
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

{% for host in haproxy_virtual_sites %}
    acl host_{{ host.domain }} hdr(host) -i {{ host.domain }}
{% if host.allowed_path_beg[0] is defined%}
{% for path in host.allowed_path_beg %}
    acl path_beg_{{ host.domain }} path_beg {{ path }}
{% endfor %}
{% endif %}
{% endfor %}

{% for host in haproxy_virtual_sites %}
{% if host.redirect_to is defined %}
    http-request redirect prefix https://{{ host.redirect_to }} code 302 if { hdr(host) -i {{ host.domain }} }
{% endif %}
{% endfor %}

    # Redirect the connection to the proper server cluster, depending on the match.
{% for host in haproxy_virtual_sites %}
{% if host.backends is defined %}
{% if host.allowed_path_beg[0] is defined%}
    use_backend be_{{ host.domain }} if host_{{ host.domain }} path_beg_{{ host.domain }}
{% else %}
    use_backend be_{{ host.domain }} if host_{{ host.domain }}
{% endif %}
{% endif %}
{% endfor %}

##########################################
{% for host in haproxy_virtual_sites %}
{% if host.backends is defined %}
backend be_{{ host.domain }}
    balance leastconn
    # We set the X-Client-IP HTTP header. This is useful if we want the web server to know the real client IP.
    http-request set-header X-Client-IP %[src]
{% for backend in host.backends %}
    server backend{{ loop.index }} {{ backend }} check
{% endfor %}

{% endif %}
{% endfor %}
{% endif %}